#!/usr/bin/python

import io
import re
import base64
import pycurl
import random
import StringIO
import numpy as np
from urllib import urlencode


def random_string(n):
    s = ''
    for i in range(n):
        s += chr(random.randint(ord('a'),ord('z')))
    return s

def clear(b):
    b.truncate(0)
    b.seek(0)

buffer = StringIO.StringIO()
header = StringIO.StringIO()

c = pycurl.Curl()
def open_connexion():
    global c
    c.close()
    c = pycurl.Curl()
    c.setopt(c.WRITEFUNCTION, buffer.write)
    c.setopt(c.HEADERFUNCTION, header.write)

open_connexion()

def get_first_page():
    c.setopt(c.URL, 'http://cookiecrypt2.hacking.w3challs.com/register')
    c.perform()
    body = buffer.getvalue()
    clear(buffer)
    clear(header)

    return re.findall('<input.*name="([^"]*)".*>',body)

#print(get_first_page()) => get fields
#fields = ['login', 'password', 'confirm', 'firstname', 'lastname']

def fill_params(login,password,firstname,lastname):
    return {'login':login,'password':password,'confirm':password,'firstname':firstname,'lastname':lastname}

login = 'aa9871263'
login_size = len(login)
params = fill_params(login,'x;apok"','ccc','dddd')

def register(p):
    c.setopt(c.URL, 'http://cookiecrypt2.hacking.w3challs.com/register')
    c.setopt(c.POSTFIELDS, urlencode(p))
    c.perform()
    body = buffer.getvalue()
    head = header.getvalue()
    clear(buffer)
    clear(header)
    return (body,head)

def register_until_cookie(s=login_size):
    global login
    p = params
    b,h = register(p)
    while re.search('/register/successful',b) is None:
        login = random_string(s)
        p['login'] = login
        b,h = register(p)
    open_connexion()
    c.setopt(c.URL, 'http://cookiecrypt2.hacking.w3challs.com')
    c.setopt(c.POSTFIELDS, urlencode({'login':login,'password':p['password']}))
    c.perform()
    body = buffer.getvalue()
    head = header.getvalue()
    clear(buffer)
    clear(header)
    cookie = re.search('cookiecrypt2_session="([^"]*)"',head).group(1)
    return cookie

cookie = register_until_cookie(10)
cookie_ref = cookie


# i = 3
# while len(cookie) == len(cookie_ref):
#     params = fill_params(login,'x;apoOk"','c'*i,'ddd')
#     cookie = register_until_cookie()
#     i += 1
# print(i)
# print(len(base64.b64decode(cookie))-len(base64.b64decode(cookie_ref)))

def test_cookie(cookie):
    c.setopt(c.URL, 'http://cookiecrypt2.hacking.w3challs.com')
    c.setopt(c.COOKIE, 'cookiecrypt2_session="'+base64.b64encode(cookie)+'"')
    c.perform()
    body = buffer.getvalue()
    head = header.getvalue()
    clear(buffer)
    clear(header)
    return (body,head)

cookie_decoded = base64.b64decode(cookie)
print(cookie_decoded)

#7 =>
#{0: 1, 2: 1, 102: 1, 18: 1, 48: 1, 50: 1, 20: 1, 120: 1}
#pour {'lastname': 'dd', 'login': 'xwqkofoqm', 'firstname': 'cc'}
#
#{0: 1, 2: 1, 50: 1, 52: 1, 22: 1, 120: 1, 20: 1, 122: 1}
#pour {'lastname': 'dddd', 'login': 'wkwjlbmbk', 'password': 'x;apok"', 'firstname': 'ccc', 'confirm': 'x;apok"'}
#
#{0: 1, 2: 1, 51: 1, 20: 1, 53: 1, 22: 1, 121: 1, 123: 1}
#pour {'lastname': 'dddd', 'login': 'trwaajvlzd', 'password': 'x;apok"', 'firstname': 'ccc', 'confirm': 'x;apok"'}
#
#{0: 1, 2: 1, 51: 1, 20: 1, 53: 1, 22: 1, 121: 1, 123: 1}
#pour {'lastname': 'dddd', 'login': 'cppiszmlcg', 'password': 'x;apok"', 'firstname': 'ccec', 'confirm': 'x;apok"'}

print(params)
f = open('result.txt','w+')
f.write("==============LOGIN => "+login+"\n")
mapped = []
for i in range(7,8):
    mapped.append({})
    for j in range(0,256):
        cookie = cookie_decoded[:i]+chr(ord(cookie_decoded[i])^j)+cookie_decoded[i+1:]
        b = test_cookie(cookie)[0]
        if re.search('Internal Server Error',b) is not None:
            f.write(str(i)+";"+str(j)+" => error\n")
        else:
            mapped[len(mapped)-1][j] = 1
            b = ''.join(b.split('\n'))
            m = re.search('</h2>Welcome (.*), you are .*<strong>(.*)</strong>!<br />',b)
            if m is not None:
                f.write(str(i)+";"+str(j)+" => "+m.group(1)+" "+m.group(2)+"\n")
            else:
                f.write(str(i)+";"+str(j)+" => Unknown "+b+"\n")

for i in range(len(mapped)):
    print(str(i)+" => ")
    print(mapped[i])
