from z3 import *
import binascii
import struct


def hash(m,l):
    pad_length = l
    block = m

    while pad_length%128!=124:
        block += '\x00'
        pad_length += 1
    block += struct.pack('I',l)
    pad_length += 4

    k = 0x4f
    state = [0xdeadbeef,0xcafebabe,0xbad1dea,0xfacefeed]
    for j in range(pad_length/128):
        x0 = state[0]
        x1 = state[1]
        x2 = state[2]
        x3 = state[3]

        for i in range(128):
            A = (x0 & x1) | (~x2 & x3)
            B = j*128+(i*k)%128

            temp = x3
            x3 = x2 + (ord(block[B])<<7)
            x2 = x1 + (ord(block[B])<<3)
            x1 = x0 + A + ord(block[B]) +x1
            x0 = temp

        state[0]+=x0
        state[1]+=x1
        state[2]+=x2
        state[3]+=x3
        state[0]%=0xffffffff+1
        state[1]%=0xffffffff+1
        state[2]%=0xffffffff+1
        state[3]%=0xffffffff+1

    return (state[0],state[1],state[2],state[3])

def hex2(a):
    t = hex(a).replace('0x','').replace('L','')
    if len(t)%2==1:
        t = '0'+t
    return t

def int_to_string(a):
    return binascii.unhexlify(hex2(a))

def concat_to_string(a,b,c,d):
    a = hex2(a)
    b = hex2(b)
    c = hex2(c)
    d = hex2(d)
    return a+b+c+d

def g(x):
    print(x)
    a,b,c,d = hash(x+"\x00",len(x)+1)
    return concat_to_string(a,b,c,d)

def h(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):
    t = int_to_string(a)+int_to_string(b)+int_to_string(c)+int_to_string(d)+int_to_string(e)+\
        int_to_string(f)+int_to_string(g)+int_to_string(h)+int_to_string(i)+int_to_string(j)+\
        int_to_string(k)+int_to_string(l)+int_to_string(m)+int_to_string(n)+int_to_string(o)
    a,b,c,d = hash(t+"\x00",len(t)+1)
    return concat_to_string(a,b,c,d)

def undoBlockEncrypt():
    s = Solver()
    vars1 = [Int('var1'+str(i)) for i in range(15)]
    vars2 = [Int('var2'+str(i)) for i in range(15)]
    s.add(h(vars1[0],vars1[1],vars1[2],vars1[3],vars1[4],
            vars1[5],vars1[6],vars1[7],vars1[8],vars1[9],
            vars1[10],vars1[11],vars1[12],vars1[13],vars1[14])==
          h(vars2[0],vars2[1],vars2[2],vars2[3],vars2[4],
            vars2[5],vars2[6],vars2[7],vars2[8],vars2[9],
            vars2[10],vars2[11],vars2[12],vars2[13],vars2[14]))
    sols = []
    while s.check() == sat:
        sol = s.model()
        for i in range(15):
            vec = sol['var1'+str(i)].as_long()
            s.add(vars1[i] != vec)
        for i in range(15):
            vec = sol['var2'+str(i)].as_long()
            s.add(vars2[i] != vec)
        print(sol)

undoBlockEncrypt()
