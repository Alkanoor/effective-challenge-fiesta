#include "ostream_writable.h"

#include <iostream>
#include <fstream>
#include <ostream>
#include <cassert>
#include <string>
#include <tuple>


std::vector<std::array<std::array<int, 2>, 33> > fill_modified(const std::vector<std::array<int, 2> >& beg, const std::vector<std::array<int, 2> >& end);
std::vector<std::array<std::vector<int>, 2> > explain_pairs(const std::vector<std::array<std::array<int, 2>, 33> >& paths);
int itere(const std::array<std::array<int, 2>, 33>& path, int val, int of);
int32_t function_4000b4(int32_t a1, int32_t a2);
char inverse_char(char in);
int inverse(int in);
float score(int in);
std::string to_string(int in);


int max = 0;
char* permutation = "\x63\x7c\x77\x7b\xf2\x6b\x6f\xc5\x30\x01\x67\x2b\xfe\xd7\xab\x76\xca\x82\xc9\x7d\xfa\x59\x47\xf0\xad\xd4\xa2\xaf\x9c\xa4\x72\xc0\xb7\xfd\x93\x26\x36\x3f\xf7\xcc\x34\xa5\xe5\xf1\x71\xd8\x31\x15\x04\xc7\x23\xc3\x18\x96\x05\x9a\x07\x12\x80\xe2\xeb\x27\xb2\x75\x09\x83\x2c\x1a\x1b\x6e\x5a\xa0\x52\x3b\xd6\xb3\x29\xe3\x2f\x84\x53\xd1\x00\xed\x20\xfc\xb1\x5b\x6a\xcb\xbe\x39\x4a\x4c\x58\xcf\xd0\xef\xaa\xfb\x43\x4d\x33\x85\x45\xf9\x02\x7f\x50\x3c\x9f\xa8\x51\xa3\x40\x8f\x92\x9d\x38\xf5\xbc\xb6\xda\x21\x10\xff\xf3\xd2\xcd\x0c\x13\xec\x5f\x97\x44\x17\xc4\xa7\x7e\x3d\x64\x5d\x19\x73\x60\x81\x4f\xdc\x22\x2a\x90\x88\x46\xee\xb8\x14\xde\x5e\x0b\xdb\xe0\x32\x3a\x0a\x49\x06\x24\x5c\xc2\xd3\xac\x62\x91\x95\xe4\x79\xe7\xc8\x37\x6d\x8d\xd5\x4e\xa9\x6c\x56\xf4\xea\x65\x7a\xae\x08\xba\x78\x25\x2e\x1c\xa6\xb4\xc6\xe8\xdd\x74\x1f\x4b\xbd\x8b\x8a\x70\x3e\xb5\x66\x48\x03\xf6\x0e\x61\x35\x57\xb9\x86\xc1\x1d\x9e\xe1\xf8\x98\x11\x69\xd9\x8e\x94\x9b\x1e\x87\xe9\xce\x55\x28\xdf\x8c\xa1\x89\x0d\xbf\xe6\x42\x68\x41\x99\x2d\x0f\xb0\x54\xbb\x16";


int main()
{
    std::vector<std::array<int, 2> > begin_pairs = {{-0x21524ff5, 0x41414141}, {-0x21524542, -0x4ff40532}, {0x400b400b, 0x42424242}, {0x44444444, 0x43434343}};
    std::vector<std::array<int, 2> > ending_pairs = {{-0xb3f4014, 0x5ea2ba26}, {0x677c68fe, 0x36be477f}, {-0x37a7829f, -0xbf6ecfb}, {0x44444444, 0x140f46e}};
    std::vector<std::array<std::array<int, 2>, 33> > begin_modified = fill_modified(begin_pairs, ending_pairs);

    std::cout<<std::hex<<begin_modified<<std::endl;
    std::cout<<"Testing: "<<function_4000b4(0xdeadb00b, 0x43fbaaef)<<" "<<to_string(inverse(0x5129a21))<<std::endl;
    auto explained = explain_pairs(begin_modified);

    int c = 0;
    std::array<std::string, 8> flag_table = {"flag", "3206", "{796", "16e2", "0697", "1206", "e6f6", "f62}"};
    flag_table.clean();
    std::ofstream ofs("out", std::ios::out|std::ios::trunc);
    for(auto it : explained)
        for(auto it2 : it)
        {
            ofs<<"=========================="<<std::endl;
            ofs<<"=========================="<<std::endl;
            std::map<float, std::tuple<std::string, int> > sorted;
            for(auto it3: it2)
                sorted[-score(inverse(it3))] = std::make_tuple(to_string(inverse(it3)), inverse(it3));
            for(auto it : sorted)
            {
                ofs<<std::hex<<-it.first<<" "<<it.second<<std::endl;
                if(!flag_table[c].size())
                    flag_table[c] = std::get<0>(it.second);
            }
            ofs<<std::endl<<std::endl;
            c++;
        }

    std::array<int, 8> perm = {0, 2, 3, 4, 1, 5, 6, 7};
    std::cout<<flag_table<<std::endl;
    std::string flag = "";
    for(int i=0; i<8; i++)
        flag += flag_table[perm[i]];
    std::cout<<flag<<std::endl;

    return 0;
}


std::vector<std::array<std::array<int, 2>, 33> > fill_modified(const std::vector<std::array<int, 2> >& beg, const std::vector<std::array<int, 2> >& end)
{
    assert(beg.size() == end.size());
    std::vector<std::array<std::array<int, 2>, 33> > ret(beg.size());

    for(size_t i=0; i<beg.size(); i++)
        for(int k=0; k<2; k++)
        {
            ret[i][0][k] = beg[i][k];
            for(int j=0; j<32; j++)
                ret[i][j+1][k] = (unsigned int)(ret[i][j][k])/2+0x80000000*((end[i][k]&(1<<j))>>j);
        }

    return ret;
}

std::vector<std::array<std::vector<int>, 2> > explain_pairs(const std::vector<std::array<std::array<int, 2>, 33> >& paths)
{
    size_t limit = paths.size();
    std::vector<std::array<std::vector<int>, 2> > ret(limit);

    for(unsigned int i=1; i!=0; i++)
    {
        for(size_t j=0; j<limit; j++)
        {
            int cur = itere(paths[j], i, 0);
            if(cur>max)
            {
                std::cout<<"New max "<<cur<<" for "<<i<<" for "<<j*2<<std::endl;
                max = cur;
            }
            if(cur==32)
                if(score(inverse(i))>80)
                {
                    std::cout<<"Found ! for "<<j*2<<" : "<<i<<" => inv "<<inverse(i)<<" "<<score(inverse(i))<<" "<<to_string(inverse(i))<<std::endl;
                    ret[j][0].push_back(i);
                }

            cur = itere(paths[j], i, 1);
            if(cur>max)
            {
                std::cout<<"New max "<<cur<<" for "<<i<<" for "<<j*2+1<<std::endl;
                max = cur;
            }
            if(cur==32)
                if(score(inverse(i))>80)
                {
                    std::cout<<"Found ! for "<<j*2+1<<" : "<<i<<" => inv "<<inverse(i)<<" "<<score(inverse(i))<<" "<<to_string(inverse(i))<<std::endl;
                    ret[j][1].push_back(i);
                }
        }
        if(!(i%0x800000))
            std::cout<<i<<std::endl;
    }

    return ret;
}

int itere(const std::array<std::array<int, 2>, 33>& path, int val, int of)
{
    //std::cout<<"=================== "<<of<<std::endl;
    for(int i=0; i<32; i++)
    {
        //std::cout<<path[i][(i+of)%2]<<" "<<path[i+1][(i+of)%2]<<" "<<val<<" => "<<function_4000b4(path[i][(i+of)%2], val)<<std::endl;
        if(function_4000b4(path[i][(i+of)%2], val) != path[i+1][(i+of)%2])
            return i;
    }
    return 32;
}

int32_t function_4000b4(int32_t a1, int32_t a2)
{
    uint32_t v2 = a1; // 0x4000c4
    int32_t v3 = 0; // 0x4000e8
    uint32_t v4 = 0;
    // branch -> 0x4000d0
    int32_t v5; // 0x40010c
    while (true) {
        // 0x4000d0
        v5 = v3;
        if ((1 << v4 & a2) != 0) {
            // 0x4000dc
            v5 = (v2 >> v4 ^ v3) % 2;
            // branch -> 0x4000f0
        }
        // 0x4000f0
        if (v4 == 31) {
            // break -> 0x4000fc
            break;
        }
        v3 = v5;
        v4++;
        // continue -> 0x4000d0
    }
    int32_t result = 0x80000000 * v5; // 0x40010c
    return (v2/2)|result;
}

char inverse_char(char in)
{
    for(int i=0; i<0x100; i++)
        if(permutation[i] == in)
            return i;

    return -1;
}

int inverse(int in)
{
    int r = 0;
    for(int i=0; i<4; i++)
    {
        char tmp = inverse_char((in>>(8*i))&0xff);
        r += tmp<<(8*i);
    }
    return r;
}

float score(int in)
{
    float score = 0;
    for(int i=0; i<4; i++)
    {
        char tmp = ((in>>(8*i))&0xff);
        if(tmp>=32 && tmp<128)
            score += 17;
        if(tmp>='0' && tmp<='9')
            score += 10;
        else if(tmp>='a' && tmp<='f')
            score += 10;
        else if(tmp>='g' && tmp<='z')
            score += 4;
        else if(tmp>='A' && tmp<='Z')
            score += 4;
        else if(tmp=='}' || tmp=='{')
            score += 10;
    }
    return score+(float)(rand()%100000000)/10000000000.0;
}

std::string to_string(int in)
{
    std::string ret="aaaa";
    for(int i=3; i>=0; i--)
    {
        char tmp = ((in>>(8*i))&0xff);
        ret[i] = tmp;
    }
    return ret;
}
