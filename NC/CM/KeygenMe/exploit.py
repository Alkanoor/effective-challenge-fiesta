N = 1527355652711270301084253411706936551636468310226135068674341266764658890626344326965567361
p = 1148999747821254709185188541405920213718593747
q = 1329291547371927626651593780682612531815487963
e = 65537

phi = (p-1)*(q-1)

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

d = modinv(e,phi)

print bin(N)


s = """000000
000010
000100
000110
001000
001010
001100
001110
010000
010010
010100
010110
011000
011010
011100
011110
100000
100010
100100
100110
101000
101010
101100
101110
110000
110010
000001
000011
000101
000111
001001
001011
001101
001111
010001
010011
010101
010111
011001
011011
011101
011111
100001
100011
100101
100111
101001
101011
101101
101111
110001
110011
110100
110101
110110
110111
111000
111001
111010
111011
111100
111101
111110
111111""".split('\n')

print len(s)

charset = [chr(i) for i in range(ord('a'),ord('z')+1)]
charset.extend([chr(i) for i in range(ord('A'),ord('Z')+1)])
charset.extend([chr(i) for i in range(ord('0'),ord('9')+1)])
charset.append('+')
charset.append('=')

corresp = {}
corresp_inv = {}
for i in range(len(charset)):
	corresp[s[i]] = charset[i]
	corresp_inv[charset[i]] = s[i]
print(corresp)

def convert_to_bin(p, N=300):
	converted = bin(p)[2:][:N]
	return '0'*(N-len(converted))+converted

def myb64(input):
	print(input)
	print(len(input))
	r = ""
	for j in range(0, len(input), 6):
		if len(input)-j-6<0:
			bloc = "0"*(len(input)-j)+input[:6+j-len(input)]
		else:
			bloc = input[len(input)-j-6:len(input)-j]
		r = corresp[bloc]+r
	return r

def myb64_reversed(input):
	r = ""
	for i in input :
		r += corresp_inv[i]
	return r


import binascii

target = int(binascii.hexlify('NC'), 16)+7*(2**16)
print(pow(target, d, N))
part1 = convert_to_bin(pow(target, d, N))

print(pow(pow(target, d, N), e, N))

print(myb64(part1))
print(hex(pow(target, d, N)))

target2 = 7
print(pow(target2, d, N))
part2 = convert_to_bin(pow(target2, d, N))

print(myb64(part2+part1))


sol = "AvyIvd7dN9LLw6lXDU+0Upsy94PLuFRZC3qBFWbbWTVcYr1Ln6w"
print(myb64_reversed(sol))

