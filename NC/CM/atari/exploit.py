# m = "flagroom"
# chars = [ord(i) for i in m]
#
# initial = 0x1505
# for i in chars:
#     n = (initial<<5)+initial+i
#     n = n&0xffffffff
#     tmp = bin(initial)
#     tmp2 = bin(n)
#     print(tmp[2:])
#     print(tmp2[2:])
#     print(hex(initial))
#     print(hex(n))
#     initial=n

def compute(k):
    initial = 0x1505
    for i in k:
        n = 33*initial+ord(i)
        n = n&0xffffffff
        initial = n
    return initial

def terminate(a, N=6, max_size=400000):
    cur = [a]
    cur_solutions = [""]
    solutions = []
    cont = True
    stop = False
    switch_mode = False
    counter = 0
    while cont and not stop and counter<N:
        temp_cur = []
        temp_str = []
        cont = False
        print(len(cur))
        if not switch_mode:
            for i in range(len(cur)):
                tmp = []
                tmp_str = []
                base_str = cur_solutions[i]
                for k in range(33):
                    for j in int_charset:
                        if (k*0x100000000+cur[i]-j)%33 == 0:
                            p = (k*0x100000000+cur[i]-j)/33
                            if p>0x1505:
                                cont = True
                                if len(temp_cur)<max_size:
                                    tmp.append((k*0x100000000+cur[i]-j)/33)
                                    tmp_str.append(base_str+chr(j))
                                else:
                                    switch_mode = True
                            elif p == 0x1505:
                                stop = True
                                print("FOUNNNNNNNNNNNNNNNNNNNNND")
                                print(base_str)
                                solutions.append(base_str+chr(j))
                if not switch_mode:
                    temp_cur.extend(tmp)
                    temp_str.extend(tmp_str)
            print(0x7c8d55c6 in temp_cur or 0xb882961 in temp_cur or 0x59759c in temp_cur)
        if switch_mode:
            print("We switched to other mode")
            #print(0x7c8d55c6 in temp_cur or 0xb882961 in temp_cur or 0x59759c in temp_cur)
            print("Testing length "+str(counter)+" "+str(len(cur)))
            for i in range(len(cur)):
                tmp = []
                tmp_str = []
                base_str = cur_solutions[i]
                for j in int_charset:
                    if (cur[i]-j)%33 == 0:
                        p = (cur[i]-j)/33
                        if p>0x1505:
                            cont = True
                            tmp.append(p)
                            tmp_str.append(base_str+chr(j))
                        elif p == 0x1505 and counter+1>=N:
                            stop = True
                            #print("FOUNNNNNNNNNNNNNNNNNNNNND")
                            #print(base_str)
                            solutions.append((base_str+chr(j))[::-1])
                temp_cur.extend(tmp)
                temp_str.extend(tmp_str)

        if len(temp_cur)>300000:
            switch_mode = True
        counter += 1
        cur = temp_cur
        cur_solutions = temp_str
    return solutions

m = "UbEE6"
a = 0x1505
for i in m:
    prev = a
    a = (a*33+ord(i))&0xffffffff
    print(hex(a))
    print(hex((a-ord(i))%33))

print(hex(a))

charset = "UbE6"
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+={}_-$@"
int_charset = [ord(i) for i in charset]

cur = 0xE380EBC
print(terminate(cur))
