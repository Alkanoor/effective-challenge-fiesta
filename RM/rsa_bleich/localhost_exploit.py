import re
import math
import struct
import socket
import random
import binascii


def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient * x, x
        y, lasty = lasty - quotient * y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)


def modinv(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError
    return x % m


HOST = 'challenge01.root-me.org'
# HOST = 'localhost'
PORT = 51027
LEN = 1024

e = 0x10001
N = int('D68590FE1F678EF6C962A4B231177E044B6E769242D36229DD9CE3462ABC7EFD39568F56F1CE6A8C124ED2E0DC2F44611E2962CF6C2E3941FC23F44DAB153E52A266E9282EDE44EB3175BF8DCB399A0CCCA5041C0CCB03A3D896B29D503EE4607FBB853ED8EB5F2C21C485FA9743E356DF46C5EE093461BC8AD8FDC722F4682977C6FAA9B0143659B16AF373F7A499892D680F48EBC6A5276D7DEAEACABDC76B4F2AE8A9980FB01529D1F8D79A708E6765718F2436A70DE2C8E30691B23AEB76E0BF93001DE98C63252DAD3A01E27B544315A51A0EF0D0FBD2C84D36768924BCB5784DE6CB3AD48100E1FFD5F332CCAC82398661CA0A66F7469A0C36633DFA3B',16)

k = 2048//8
B = pow(2,8*(k-2))

found = False
c = int('AB4BEEE8FE53773EBDF5BFF1A4C5364558CA986BA74BAD44ECC106694BEC44CD25681FAE106C81C7195231B4A2F6CA1E1E7853C6BBA2A18E4A9B8FDDD262ED27325F6F56045CE8593A2BD10AFFC8F42B16E43E4655EC328F4F34C8EE0269FC4F00B02B37FC7296A9B2E78D25E2D5777D83A1510B97F9F44896CAAB14078E6300740B3A25D2098D8042F5C6953BE70108A88040E48109F05E7E2923A481475293C5AD68F540754EA6CAB139BC803A91890383D2D1AF33D2C6216F4C68D0D0895B5E5B7B627AE36FBABEDB67ADC742FF911909D65E8B9B07D805F24B2ABD336F28C412A433F0FE2F19F066DFA8833AB2A2CCB9764D0CF1D754082D0BE770230EF6',16)
count = 0

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((HOST, PORT))

#while not found:
#    r = random.randint(1,N)
#    count += 1
#    c_prim = (c*pow(r,e,N))%N
#    tmp = hex(c_prim).replace('0x','').replace('L','')
#    if len(tmp)%2 == 1:
#        tmp = '0'+tmp
#
#    sock.send(binascii.unhexlify(tmp))
#    tmp = sock.recv(LEN)
#
#    if not re.search("error",tmp):
#        print("FOUND !")
#        print(tmp)
#        print(c_prim)
#        print(r)
#        break
#
#    if count%10000==0:
#        print(count)

s0 = 24639660426623825510452517312504479597387937247408242586553029169489491431431307100654161309016293819943435789282947807160111790112643937094534319816024776335409038154921611047399372720734221068213354385149958425864724518967864786400991162716201299289721976101743340917502812799634013227422355392870512369860771273863404818858740689157045479497964399104792951003880275191673937251221936547181679984652580450712934540950413757854132939589716817072069962624094878186338862720870647245954646365633239863022434890082570480549985403992469299735141082646278924361418983838430214875566457604470564039745605292381756424226281
c0 = (c*pow(s0,e,N))%N

#a found with bleichenbacher script
a = 1313107935835807728362588354917605055167302463143587376511720035073943725045293537248551238104453381583211361068624186399762476647842057158457742041986272458898152673927318002662505589626116887071335265938020417859872368072101819575773741256007303776590420866626570154461008926865175550937116048871269990171978701168333164731717845648558526084920520210978683068671115355752308715696734085497520456951203673505865671799195367266207146219209285673586037920974806719488955753019482750370491851288033649024431621738738742394028676868129717528482018936479312763835658631753422497685993520167352606729186717680453327007
print((a*modinv(s0,N))%N)
tmp = hex((a*modinv(s0,N))%N).replace('0x','').replace('L','')
if len(tmp)%2 == 1:
    tmp = '0'+tmp
print(binascii.unhexlify(tmp))
exit()

#s1 = N//(3*B)
#while not found:
#    c_prim = (c0*pow(s1,e,N))%N
#    tmp = hex(c_prim).replace('0x','').replace('L','')HOST = 'challenge01.root-me.org'
#    if len(tmp)%2 == 1:
#        tmp = '0'+tmp
#
#    sock.send(binascii.unhexlify(tmp))
#    tmp = sock.recv(LEN)
#
#    if not re.search("error",tmp):
#        print("FOUND !")
#        print(tmp)
#        print(c_prim)
#        print(s1)
#        break
#
#    s1 += 1

def test(c,sock):
    tmp = hex(c).replace('0x','').replace('L','')
    if len(tmp)%2 == 1:
        tmp = '0'+tmp

    sock.send(binascii.unhexlify(tmp))
    tmp = sock.recv(LEN)

    if not re.search("error",tmp):
        return True

    return False

M = [(2*B,3*B-1)]
i = 1

#i = 3
#M = [(656560127120093698553277305760756241529648709961521508995810342139125043779835170488185982365398113910288792039748042466964722668530822733222206556577347701449938600405402362835902244300777063296820318614862974024602298628641721502149111599333592313028631341081201225788385407975761965943516601496282468135785784878377254420029926401677633380019015411935440752061147740623576605713797858219777129733207962417206349779148004133629730402727442310119695969431805294610837630777087342395136360919964371426326600587712043623497961377839203252263866121457354583311205508274004679024597670707089266133918648278645918126L, 656573425461980188496727569856321013698002886746002636541779654289985084755382531010006717050801783875157768530075501398909428304800349622206589017760269631617149277590536356424926270633325660337852518300989448361897531470130708210567990202008179036550994470748031774323561830173223130841010563293463934083589477240018623496431876618764513007730982947853057118025361816499444239311950411955816994885613926660750975385115680712635120319656146164554150341251299480656557560155332371608969428190927404962129458370568586970265740954662609947466651966027246011345433950219763568278925098976478851243275993385952899377L)]
#s = 123742

#i = 11+1
#M = [(1193734501023226819877668357810065835093054429264582909303482501385720987375523214434560869663436652548413697556265999616844906642952266513472560236681281044210721520374366470664883480617492629492089488072234501592321561425605018483013321491291771716399574946890203506816059545253870000251290203715406891636346170785459966696964381830088827310556903969753117883904849105512850676226249669913437254282270362397342636160188044570074957978606464807620947538938630902917594612898472891835742538775172361299229586194993743321725081122453166258888646966188379704444492779871306928767423989539420744132202496615617434492L, 1193734508429264329415822222845744973711614133877870997331417526959577125478064828265772203622129610351972988824491587401921878827225004264619349001343505074291632932835386551698277584333006704123492182777694658403542016826850901172032322983560017219373946574206714949139218750433948017299568516152588161184673764322671075420080550477477855389834878483869279644714427293424810318751857756886835490644142653697585420811112367207623888747989748692782427969915060563880245948637803890129675768600844115556523223585234403294301165473170747341882252359971418489918501531559074257337009549613877284751264336641638102808L)]
#s = 38565917

i = 104+1
M = [(1094255151894244426144443794619148116122555542988304157883724934598337883552168323048622358252853115293137737051409763327016447517723321531522328629602086314538208642213218289175283614398433623717745591023232269435552468111300946025228668101217772824931468188900947043925723168119242862316100583132478306818258817582884588304004629031655203515035747375117877094808470453559366450890304319549897041778519252418094634650330360522444300547569138653013130253400757808859185594244240548411964087902661791534722768045248163298425927728502066971443597573336517958886777514520710494273798613205628950449943264250722060189L, 1094255151894244426148816907738941199382000156267074333846791451125855785793193761567232457798846729216083611701354210740417191006842593767625020404408475287547425200194356245294244062572630264606169608597358302407694809152662973829816729969476698944005463938215579167737577823785656715170454018959449083219147423770397300011790298005199844741174175480113685517196875997741977230054889414806154201714794314027524087504376837343263531312122809751758061370850234709229796374180250422358878954453506004927583124708079063072830944832359528682118537863600066110991500300300327857972359335008230527390630127391393480941L), (1094255151894244666305173827627924142013026109499683588614822432124548432739347324486934559369857862164506089905496457202879620549133148190635319979857872236447187444823690238795867577177719497085084028871980594313760559503865327165186839779874005556288594225661646092113497417482413406662860550912441537212388928066526112026000249660069433984081844115998163780709834688707017561991576913361698908238629546513959698660021585324732294103482523640445289538010706300030769407557459318123793801261978357004245056546776235933532188066508600581515770957865333295884707583150217052141834648414078989292971759089093790474L, 1094255151894244666309546940747717225272470722778453764577888948652066334980372763005544658915851476087451964555440904616280364038252420426738011754664261209456404002804828194914828025351916137973508046446106627285902900545227354969774901648132931675362589974976278215925352073148827259517213986739412313613277534254038823733785918633614075210220272220993972203098240232889628341156162008617956068174904608123389151514068062145551524868036194739190220655460183200401380187493469192070708667812822570397105413209607135707937205170366062292190711248128881447989430368929834415840395370216680566233658622229765211226L)]
s = 112761404808348932881
while True:
    if i==1:
        s = 41248
    else:
        if len(M)>=2:
            s += 1
            while True:
                if test((c0*pow(s,e,N))%N,sock):
                    print("Found !")
                    print(s)
                    break
                s += 1
        else:
            a,b = M[0]
            m_r = 2*(b*s-2*B)//N
            print("Min : "+str(m_r))
            r = m_r
            while True:
                if b<a:
                    print("NULLLL !")
                    exit()
                s = (2*B+r*N)//b
                M_ = (3*B+r*N)//a
                while s<M_:
                    if test((c0*pow(s,e,N))%N,sock):
                        print("Found !")
                        print(s)
                        break
                    s += 1
                if s<M_:
                    print("Found continues !")
                    print(r)
                    break
                r += 1

    M_prim = []
    for a,b in M:
        for r in range((a*s-3*B+1)//N,(b*s-2*B)//N):
            c = max(a,(2*B+r*N)//s+1)
            d = min(b,(3*B-1+r*N)//s)
            if c<d:
                M_prim.append((c,d))
    if len(M_prim)>0:
        M = M_prim
    if len(M) == 1 and abs(M[0][1]-M[0][0])<=2:
        print("NICE !!!")
        print(M[0][0])
        print(hex(M[0][0]))
        print(binascii.unhexlify(hex(M[0][0]).replace('0x','').replace('L','')))
        break

    print("New test for "+str(i))
    print(i)
    print(M)
    print(s)

    i+=1
