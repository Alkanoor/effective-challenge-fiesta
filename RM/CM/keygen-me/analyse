80494df:	e8 98 f7 ff ff       	call   8048c7c <gtk_window_new@plt>


8049578:	c7 44 24 08 60 9a 04 	movl   $0x8049a60,0x8(%esp)
804957f:	08
8049580:	c7 44 24 04 bc 9d 04 	movl   $0x8049dbc,0x4(%esp)
8049587:	08
8049588:	89 04 24             	mov    %eax,(%esp)
804958b:	e8 7c f8 ff ff       	call   8048e0c <g_signal_connect_data@plt>


804951d:	c7 44 24 04 a7 9d 04 	movl   $0x8049da7,0x4(%esp) => contient le titre
8049524:	08
8049525:	89 04 24             	mov    %eax,(%esp)
8049528:	e8 2f f8 ff ff       	call   8048d5c <gtk_window_set_title@plt>


8049736 => obfusqué => là où c'est intéressant

0x8049743:  add    $0x4,%esp
0x804974e:	movl   $0xb,(%esp)
0x8049755:	call   0x8048ddc <gtk_entry_new_with_max_length@plt>
0x804975a:	mov    %eax,%edi
0x804975c:	call   0x8048c5c <gtk_entry_new@plt>
0x8049761:	mov    %eax,0x48(%esp)
0x8049765:	call   0x8048dfc <gtk_entry_get_type@plt>
0x804976a:	mov    %edi,(%esp)
0x804976d:	mov    %eax,%ebx
0x804976f:	mov    %eax,0x4(%esp)
0x8049773:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x8049778:	movl   $0x8049dca,0x4(%esp)    => Name
0x8049780:	mov    %eax,(%esp)
0x8049783:	call   0x8048cbc <gtk_entry_set_text@plt>
0x8049788:	mov    0x48(%esp),%edx
0x804978c:	mov    %ebx,0x4(%esp)
0x8049790:	mov    %edx,(%esp)
0x8049793:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x8049798:	movl   $0x8049dcf,0x4(%esp)    => Serial
0x80497a0:	mov    %eax,(%esp)
0x80497a3:	call   0x8048cbc <gtk_entry_set_text@plt>
0x80497a8:	call   0x80497bd


0x80497b6:	add    $0x4,%esp
0x80497c4:	movl   $0x0,0x4(%esp)
0x80497cc:	movl   $0x0,(%esp)
0x80497d3:	call   0x8048cac <gtk_vbox_new@plt>
0x80497d8:	movl   $0x8049dd6,(%esp)
0x80497df:	mov    %eax,%ebx
0x80497e1:	call   0x8048e5c <gtk_button_new_with_label@plt>
0x80497e6:	movl   $0x50,0x4(%esp)
0x80497ee:	mov    %eax,(%esp)
0x80497f1:	mov    %eax,0x40(%esp)
0x80497f5:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x80497fa:	movl   $0x0,0x14(%esp)
0x8049802:	movl   $0x0,0x10(%esp)
0x804980a:	mov    %ebx,0xc(%esp)
0x804980e:	movl   $0x8049110,0x8(%esp)
0x8049816:	movl   $0x8049ddf,0x4(%esp)
0x804981e:	mov    %eax,(%esp)
0x8049821:	call   0x8048e0c <g_signal_connect_data@plt>
0x8049826:	push   %ecx
0x8049827:	push   %eax
0x8049828:	push   %edx
0x8049829:	rdtsc
0x804982b:	mov    %eax,%ecx
0x804982d:	call   0x804983f


0x8049110 => code du bouton
0x8049110:	push   %ebp
0x8049111:	mov    %esp,%ebp
0x8049113:	push   %edi
0x8049114:	push   %esi
0x8049115:	push   %ebx
0x8049116:	sub    $0x4c,%esp
0x8049119:	call   0x8049126

0x8049143:	push   %edx
0x8049144:	push   %ecx
0x8049145:	push   %eax
0x8049146:	rdtsc
0x8049148:	mov    %eax,%ecx
0x804914a:	call   0x804915a

0x8049146:	rdtsc
0x8049160:	rdtsc

0x8049171:	rdtsc
0x8049192:	rdtsc

0x80491f7:	rdtsc
0x8049214:	rdtsc


0x8049220:	pop    %ecx
0x8049221:	pop    %eax
0x8049222:	call   0x8048d4c <gtk_container_get_type@plt>
0x8049227:	mov    %eax,0x4(%esp)
0x804922b:	mov    0xc(%ebp),%eax
0x804922e:	mov    %eax,(%esp)
0x8049231:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x8049236:	mov    %eax,(%esp)
0x8049239:	call   0x8048c3c <gtk_container_get_children@plt>
0x804923e:	test   %eax,%eax
0x8049240:	mov    %eax,%edx
0x8049242:	je     0x8049247
0x8049244:	mov    0x4(%eax),%edx
0x8049247:	mov    %edx,-0x2c(%ebp)
0x804924a:	call   0x8048cdc <gtk_widget_get_type@plt>
0x804924f:	mov    -0x2c(%ebp),%edx
0x8049252:	mov    %eax,0x4(%esp)
0x8049256:	mov    %eax,%esi
0x8049258:	mov    (%edx),%eax
0x804925a:	mov    %eax,(%esp)
0x804925d:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x8049262:	mov    %eax,%ebx
0x8049264:	call   0x8048dfc <gtk_entry_get_type@plt>
0x8049269:	mov    %ebx,(%esp)
0x804926c:	mov    %eax,%edi
0x804926e:	mov    %eax,0x4(%esp)
0x8049272:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x8049277:	mov    %eax,(%esp)
========> 0x804927a:	call   0x8048d1c <gtk_entry_get_text@plt>
0x804927f:	mov    -0x2c(%ebp),%edx
0x8049282:	mov    0x4(%edx),%edx
0x8049285:	mov    %eax,%ebx
0x8049287:	call   0x804929d

0x80492a9:	mov    %esi,0x4(%esp)
0x80492ad:	mov    (%edx),%eax
0x80492af:	mov    %edx,-0x2c(%ebp)
0x80492b2:	mov    %eax,(%esp)
0x80492b5:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x80492ba:	mov    %edi,0x4(%esp)
0x80492be:	mov    %eax,(%esp)
0x80492c1:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x80492c6:	mov    %eax,(%esp)
========> 0x80492c9:	call   0x8048d1c <gtk_entry_get_text@plt>
0x80492ce:	mov    %eax,%edi
0x80492d0:	push   %eax
0x80492d1:	push   %edx
0x80492d2:	push   %ecx
0x80492d3:	rdtsc
0x80492d5:	mov    %eax,%ecx
0x80492d7:	call   0x80492e2


0x80492e8:	rdtsc


0x80492f3:	pop    %ecx
0x80492f4:	pop    %edx
0x80492f5:	pop    %eax
0x80492f6:	mov    -0x2c(%ebp),%edx
0x80492f9:	mov    0x4(%edx),%eax
0x80492fc:	test   %eax,%eax
0x80492fe:	je     0x8049303
0x8049300:	mov    0x4(%eax),%eax
0x8049303:	mov    %esi,0x4(%esp)
0x8049307:	mov    (%eax),%eax
0x8049309:	mov    %eax,(%esp)
0x804930c:	call   0x8048e1c <g_type_check_instance_cast@plt>
0x8049311:	mov    %ebx,(%esp)
0x8049314:	mov    %eax,%esi
0x8049316:	call   0x8048d8c <strlen@plt>
0x804931b:	cmp    $0x2,%eax
0x804931e:	jbe    0x8049440
0x8049324:	cmpb   $0x0,(%edi)
0x8049327:	je     0x8049410
0x804932d:	lea    -0x1c(%ebp),%eax
0x8049330:	mov    %edi,(%esp)
0x8049333:	movl   $0xa,0x8(%esp)
0x804933b:	mov    %eax,0x4(%esp)
=======> 0x804933f:	call   0x8048d3c <strtoull@plt>    conversion mdp to ull
0x8049344:	mov    %eax,%ecx
0x8049346:	mov    %edx,%edi
0x8049348:	push   %edx
0x8049349:	push   %eax
0x804934a:	push   %ecx
0x804934b:	rdtsc
0x804934d:	mov    %eax,%ecx
0x804934f:	call   0x804935c


0x8049478:	mov    %ecx,-0x2c(%ebp)
0x804947b:	mov    %ebx,(%esp)
0x8048f50:	push   %ebp

0x8048f51:	mov    %esp,%ebp
0x8048f53:	push   %edi
0x8048f54:	push   %esi
0x8048f55:	push   %ebx
0x8048f56:	sub    $0x1c,%esp

0x8048fff:	pop    %eax
0x8049000:	pop    %ecx
0x8049001:	mov    0x8(%ebp),%edx
0x8049004:	mov    $0x2,%edi
0x8049009:	movzbl (%edx),%eax
0x804900c:	movl   $0x0,-0x20(%ebp)
0x8049013:	movl   $0x0,-0x1c(%ebp)
0x804901a:	test   %al,%al
0x804901c:	je     0x80490f5
0x8049022:	lea    0x0(%esi),%esi
0x8049028:	call   0x8049041

0x8049045:	xor    %ecx,%ecx
0x8049047:	test   %edi,%edi
0x8049049:	mov    $0x1,%edx
0x804904e:	je     0x804909b
0x8049050:	movsbl %al,%eax
0x8049053:	xor    %ecx,%ecx
0x8049055:	mov    %eax,%edx
0x8049057:	xor    %ebx,%ebx
0x8049059:	sar    $0x1f,%edx
0x804905c:	mov    %edx,-0x14(%ebp)
0x804905f:	mov    $0x1,%edx
0x8049064:	mov    %eax,-0x18(%ebp)
0x8049067:	mov    %edx,-0x28(%ebp)
0x804906a:	mov    %ecx,-0x24(%ebp)
0x804906d:	lea    0x0(%esi),%esi
==============> ebp-0x28 => serial; ebp-0x18 => lettre
0x8049070:	mov    -0x18(%ebp),%ecx
0x8049073:	add    $0x1,%ebx
0x8049076:	mov    -0x14(%ebp),%esi
0x8049079:	imul   -0x24(%ebp),%ecx
0x804907d:	imul   -0x28(%ebp),%esi
0x8049081:	mov    -0x18(%ebp),%eax
0x8049084:	mull   -0x28(%ebp)
0x8049087:	add    %esi,%ecx
0x8049089:	add    %ecx,%edx
0x804908b:	cmp    %ebx,%edi
0x804908d:	mov    %eax,-0x28(%ebp)
0x8049090:	mov    %edx,-0x24(%ebp)
0x8049093:	ja     0x8049070
0x8049095:	mov    -0x28(%ebp),%edx
0x8049098:	mov    -0x24(%ebp),%ecx
0x804909b:	call   0x80490ab

0x80490b0:	add    %edx,-0x20(%ebp)
0x80490b3:	adc    %ecx,-0x1c(%ebp)
0x80490e2:	mov    0x8(%ebp),%edx  =======> Name dans edx
0x80490e5:	movzbl -0x1(%edx,%edi,1),%eax  =======> Lettre actuelle dans eax
0x80490ea:	add    $0x1,%edi           ==========> counter dans edi
0x80490ed:	test   %al,%al
0x80490ef:	jne    0x8049028
0x80490f5:	mov    -0x20(%ebp),%eax
0x80490f8:	mov    -0x1c(%ebp),%edx
0x80490fb:	add    $0x1c,%esp
0x80490fe:	pop    %ebx
0x80490ff:	pop    %esi


0x8049483:	mov    -0x2c(%ebp),%ecx
0x8049486:	xor    %edi,%edx
0x8049488:	xor    %ecx,%eax
0x804948a:	or     %eax,%edx

 => On doit avoir eax = ebp-0x2c
  et edx = edi
Ca correspond au nombre retourné par le strtoull

=> resultat : 10844645039911251
